{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> Python client for accessing PancakeSwap Lottery smart contract information through Web3.py </p> <p> </p> <p>Documentation: https://frefrik.github.io/pancakeswap-lottery</p> <p>Examples: https://frefrik.github.io/pancakeswap-lottery/guide/examples</p> <p>Source Code: https://github.com/frefrik/pancakeswap-lottery</p> <p>PyPI: https://pypi.org/project/pancakeswap-lottery</p>"},{"location":"#overview","title":"Overview","text":"<p>pancakeswap-lottery is a python interface to PancakeSwap Lottery smart contract endpoints.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>Python 3.8+</p> <ul> <li>Web3.py - A python interface for interacting with the Ethereum blockchain and ecosystem.</li> </ul>"},{"location":"#installation","title":"Installation","text":"pip install pancakeswap-lottery Successfully installed pancakeswap-lottery restart \u21bb"},{"location":"#usage","title":"Usage","text":"Example <pre><code>from pancakeswap_lottery import LotteryV2\n\nlottery = LotteryV2()\n\n# Get current lottery round number\ncurrent_round = lottery.current_round()\n\n# Current ticket id\nticketid = lottery.current_ticket()\n\n# Status of lottery round\nstatus = lottery.status()\n\n# Lottery draw date and time of lottery round\ndraw_date = lottery.draw_date()\n\n# Ticket price in CAKE\nticket_price = lottery.ticket_price()\n\n# Total prize pool of lottery round in CAKE\nprize_pool = lottery.prize_pool()\n\n# Prize pool allocation in CAKE\nallocation = lottery.prize_pool_allocation()\n\n# Total number of tickets in lottery round\ntotal_tickets = lottery.total_tickets(lotteryround=23)\n\n# Winning numbers for lottery round\nwinning_numbers = lottery.winning_numbers(lotteryround=16)\n\n# Get lottery winnings (CAKE) for a given address and round\naddress_winnings = lottery.address_winnings(address=\"0x621D6ee5FA9634d86396C13fAaD6A7827606A6d7\", lotteryround=16)\n\n# Get lottery winnings (CAKE) for a given ticket and round\nticket_winnings = lottery.ticket_winnings(lotteryround=10, ticketid=158408)\n\n# Number of winners per prize bracket\nwinners = lottery.winners_per_bracket(lotteryround=16)\n\n# Amount of CAKE won per ticket in each prize bracket\ncake_per_bracket = lottery.cake_per_bracket(lotteryround=16)\n\n# Percentage probability of winning the lottery\nwinning_probability = lottery.winning_probability()\n\n# Data from historic lottery rounds can also be pulled\nticket_price_hist = lottery.ticket_price(lotteryround=10)\nprize_pool_hist = lottery.prize_pool(lotteryround=10)\nallocation_hist = lottery.prize_pool_allocation(lotteryround=10)\ndraw_date_hist = lottery.draw_date(lotteryround=10)\nstatus_hist = lottery.status(lotteryround=10)\n</code></pre> Data <pre><code>&gt;&gt;&gt; lottery.current_round()\n20\n\n&gt;&gt;&gt; lottery.current_ticket()\n1124981\n\n&gt;&gt;&gt; lottery.status()\nOpen\n\n&gt;&gt;&gt; lottery.draw_date()\n2021-07-12 20:00:00\n\n&gt;&gt;&gt; lottery.ticket_price()\n0.32\n\n&gt;&gt;&gt; lottery.prize_pool()\n63024\n\n&gt;&gt;&gt; lottery.prize_pool_allocation()\n{'match_1': 630, 'match_2': 1891, 'match_3': 3781, 'match_4': 6302, 'match_5': 12605, 'match_6': 25210, 'burn': 12605}\n\n&gt;&gt;&gt; lottery.total_tickets(lotteryround=23)\n14253\n\n&gt;&gt;&gt; lottery.winning_numbers(lotteryround=16)\n743350\n\n&gt;&gt;&gt; lottery.address_winnings(\"0x621D6ee5FA9634d86396C13fAaD6A7827606A6d7\", lotteryround=16)\n{'tickets': 8, 'ticketids': [634970, 634971, 634972, 634973, 634974, 634975, 634976, 634977], 'winning_tickets': [634970, 634971]}\n\n&gt;&gt;&gt; lottery.ticket_winnings(lotteryround=15, ticketid=567093)\n865.536634168\n\n&gt;&gt;&gt; lottery.winners_per_bracket(lotteryround=16)\n{'match_1': 19133, 'match_2': 1921, 'match_3': 188, 'match_4': 21, 'match_5': 1, 'match_6': 1}\n\n&gt;&gt;&gt; lottery.cake_per_bracket(lotteryround=16)\n{'match_1': 0, 'match_2': 3, 'match_3': 62, 'match_4': 925, 'match_5': 38843, 'match_6': 77687}\n\n&gt;&gt;&gt; lottery.winning_probability()\n{'match_1': 10.0, 'match_2': 1.0, 'match_3': 0.1, 'match_4': 0.01, 'match_5': 0.001, 'match_6': 0.0001}\n</code></pre>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This project is not affiliated with the PancakeSwap team.</p>"},{"location":"reference/","title":"Code Reference","text":"<p>Class for accessing PancakeSwap Lottery V2 smart-contract information.</p> Source code in <code>pancakeswap_lottery/lotteryv2.py</code> <pre><code>class LotteryV2:\n    \"\"\"Class for accessing PancakeSwap Lottery V2 smart-contract information.\"\"\"\n\n    def __init__(self, provider=\"https://bsc-dataseed.binance.org\"):\n        \"\"\"Initialize the object\n\n        Attributes:\n            provider (str): Web3 HTTPProvider.\n\n                Defaults to https://bsc-dataseed.binance.org\n\n        Examples:\n            lottery = LotteryV2()\n        \"\"\"\n        self.w3 = Web3(Web3.HTTPProvider(provider))\n\n        contract_addresses = {\n            \"PancakeSwapLottery\": \"0x5aF6D33DE2ccEC94efb1bDF8f92Bd58085432d2c\",\n            \"CakeToken\": \"0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82\",\n        }\n\n        self.lottery_contract = self._load_contract(\n            abi_name=\"PancakeSwapLottery\",\n            address=contract_addresses[\"PancakeSwapLottery\"],\n        )\n\n        self.token_contract = self._load_contract(\n            abi_name=\"CakeToken\", address=contract_addresses[\"CakeToken\"]\n        )\n\n        self.decimals = 10**18\n\n    def _load_contract(self, abi_name, address):\n        return self.w3.eth.contract(address=address, abi=load_abi(abi_name))\n\n    def _status(self, statusid):\n        status = {\n            1: \"Open\",\n            2: \"_Unknown_\",\n            3: \"Claimed\",\n        }\n\n        return status[statusid]\n\n    def view_lottery(self, lotteryround):\n        data = self.lottery_contract.functions.viewLottery(lotteryround).call()\n\n        d = {\n            \"status\": self._status(data[0]),\n            \"startTime\": datetime.fromtimestamp(data[1]),\n            \"endTime\": datetime.fromtimestamp(data[2]),\n            \"priceTicketInCake\": data[3] / self.decimals,\n            \"discountDivisor\": data[4],\n            \"rewardsBreakdown\": data[5],\n            \"treasuryFee\": data[6],\n            \"cakePerBracket\": {\n                \"match_1\": round(data[7][0] / self.decimals),\n                \"match_2\": round(data[7][1] / self.decimals),\n                \"match_3\": round(data[7][2] / self.decimals),\n                \"match_4\": round(data[7][3] / self.decimals),\n                \"match_5\": round(data[7][4] / self.decimals),\n                \"match_6\": round(data[7][5] / self.decimals),\n            },\n            \"countWinnersPerBracket\": {\n                \"match_1\": data[8][0],\n                \"match_2\": data[8][1],\n                \"match_3\": data[8][2],\n                \"match_4\": data[8][3],\n                \"match_5\": data[8][4],\n                \"match_6\": data[8][5],\n            },\n            \"firstTicketId\": data[9],\n            \"firstTicketIdNextLottery\": data[10],\n            \"amountCollectedInCake\": data[11] / self.decimals,\n            \"finalNumber\": data[12],\n        }\n\n        return d\n\n    def current_round(self):\n        \"\"\"Get current lottery round number\n\n        Examples:\n            &gt;&gt;&gt; lottery.current_round()\n            8\n        \"\"\"\n        return self.lottery_contract.functions.currentLotteryId().call()\n\n    def current_ticket(self):\n        \"\"\"Get current ticket id\n\n        Examples:\n            &gt;&gt;&gt; lottery.current_ticket()\n            38963\n        \"\"\"\n        return self.lottery_contract.functions.currentTicketId().call()\n\n    def prize_pool(self, lotteryround=None):\n        \"\"\"Get total prize pool size in CAKE\n\n        Args:\n            lotteryround (:obj:`int`, optional): Lottery round\n\n        Examples:\n            &gt;&gt;&gt; lottery.prize_pool()\n            141947\n        \"\"\"\n\n        if not lotteryround:\n            lotteryround = self.current_round()\n\n        data = self.view_lottery(lotteryround)\n        amount = data.get(\"amountCollectedInCake\")\n\n        return round(amount)\n\n    def draw_date(self, lotteryround=None):\n        \"\"\"Get lottery draw date\n\n        Args:\n            lotteryround (:obj:`int`, optional): Lottery round\n\n        Examples:\n            &gt;&gt;&gt; lottery.draw_date()\n            141947\n        \"\"\"\n\n        if not lotteryround:\n            lotteryround = self.current_round()\n\n        lottery = self.view_lottery(lotteryround)\n        lotter_date = lottery.get(\"endTime\")\n\n        return lotter_date\n\n    def prize_pool_allocation(self, lotteryround=None):\n        \"\"\"Get prize pool allocation in CAKE\n\n        Allocation percentages:\n        - Match first 1: 1%\n        - Match first 2: 3%\n        - Match first 3: 6%\n        - Match first 4: 10%\n        - Match first 5: 20%\n        - Match first 6: 40%\n        - Burn Pool: 20%\n\n        Args:\n            lotteryround (:obj:`int`, optional): Lottery round\n\n        Examples:\n            &gt;&gt;&gt; lottery.prize_pool_allocation()\n            {\n                'match_1': 1419,\n                'match_2': 4258,\n                'match_3': 8517,\n                'match_4': 14195,\n                'match_5': 28389,\n                'match_6': 56779,\n                'burn': 28389\n            }\n        \"\"\"\n        if not lotteryround:\n            lotteryround = self.current_round()\n\n        data = self.view_lottery(lotteryround)\n        prize_pool = data.get(\"amountCollectedInCake\")\n\n        d = {\n            \"match_1\": round(prize_pool * 0.01),\n            \"match_2\": round(prize_pool * 0.03),\n            \"match_3\": round(prize_pool * 0.06),\n            \"match_4\": round(prize_pool * 0.1),\n            \"match_5\": round(prize_pool * 0.2),\n            \"match_6\": round(prize_pool * 0.4),\n            \"burn\": round(prize_pool * 0.2),\n        }\n\n        return d\n\n    def ticket_price(self, lotteryround=None):\n        \"\"\"Get ticket price in CAKE\n\n        Args:\n            lotteryround (:obj:`int`, optional): Lottery round\n\n        Examples:\n            &gt;&gt;&gt; lottery.ticket_price()\n            0.34\n        \"\"\"\n\n        if not lotteryround:\n            lotteryround = self.current_round()\n\n        lottery = self.view_lottery(lotteryround)\n        price = lottery.get(\"priceTicketInCake\")\n\n        return price\n\n    def status(self, lotteryround=None):\n        \"\"\"Get status of lottery round\n\n        Args:\n            lotteryround (:obj:`int`, optional): Lottery round\n\n        Examples:\n            &gt;&gt;&gt; lottery.status()\n            Open\n        \"\"\"\n\n        if not lotteryround:\n            lotteryround = self.current_round()\n\n        data = self.view_lottery(lotteryround)\n        lottery_status = data.get(\"status\")\n\n        return lottery_status\n\n    def winners_per_bracket(self, lotteryround):\n        \"\"\"Get number of winners per prize bracket\n\n        Args:\n            lotteryround (int): Lottery round\n\n        Examples:\n            &gt;&gt;&gt; lottery.winners_per_bracket(lotteryround=16)\n            {\n                'match_1': 19133,\n                'match_2': 1921,\n                'match_3': 188,\n                'match_4': 21,\n                'match_5': 1,\n                'match_6': 1\n            }\n        \"\"\"\n\n        data = self.view_lottery(lotteryround)\n        d = data.get(\"countWinnersPerBracket\")\n\n        return d\n\n    def cake_per_bracket(self, lotteryround):\n        \"\"\"Get amount of CAKE won per ticket in each prize bracket\n\n        Args:\n            lotteryround (int): Lottery round\n\n        Examples:\n            &gt;&gt;&gt; lottery.cake_per_bracket(lotteryround=16)\n            {\n                'match_1': 0.10150861284172895,\n                'match_2': 3.0330519877680375,\n                'match_3': 61.98396668619574,\n                'match_4': 924.8401378575238,\n                'match_5': 38843.285790016,\n                'match_6': 77686.571580032\n            }\n        \"\"\"\n\n        data = self.view_lottery(lotteryround)\n        d = data.get(\"cakePerBracket\")\n\n        return d\n\n    def winning_probability(self, numbers_matched=None):\n        \"\"\"Get percentage probability of winning the lottery\n\n        Args:\n            numbers_matched (:obj:`int`, optional): Number of winning numbers matched\n\n        Examples:\n            &gt;&gt;&gt; lottery.winning_probability()\n            {\n                'match_1': 10.0,\n                'match_2': 1.0,\n                'match_3': 0.1,\n                'match_4': 0.01,\n                'match_5': 0.001,\n                'match_6': 0.0001\n            }\n        \"\"\"\n        possible_numbers = 10\n        matchballs = [1, 2, 3, 4, 5, 6]\n        probability_pct = {}\n\n        if numbers_matched:\n            if numbers_matched not in range(1, 7):\n                return \"Pick a number between 1 and 6\"\n\n            e = possible_numbers**numbers_matched\n            odds = 1 / e * 100\n\n            return float(f\"{odds:.4f}\")\n\n        for matchball in matchballs:\n            e = possible_numbers**matchball\n            odds = 1 / e * 100\n            probability_pct.update({f\"match_{matchball}\": float(f\"{odds:.4f}\")})\n\n        return probability_pct\n\n    def winning_numbers(self, lotteryround):\n        \"\"\"Get winning numbers for lottery round\n\n        Args:\n            lotteryround (int): Lottery round\n\n        Examples:\n            &gt;&gt;&gt; lottery.winning_numbers(lotteryround=16)\n            0\n        \"\"\"\n        data = self.view_lottery(lotteryround)\n        final_number = str(data.get(\"finalNumber\"))\n        final_number = final_number[::-1][:-1]\n\n        return final_number\n\n    def ticket_winnings(self, lotteryround, ticketid):\n        \"\"\"Get lottery winnings (CAKE) for a given ticket and round\n\n        Args:\n            lotteryround (int): Lottery round\n            ticketid (int): Ticket id\n\n        Examples:\n            &gt;&gt;&gt; lottery.ticket_winnings(lotteryround=15, ticketid=567093)\n            865.536634168\n        \"\"\"\n        winnings = 0\n        brackets = [0, 1, 2, 3, 4, 5]\n\n        for bracket in brackets:\n            data = self.lottery_contract.functions.viewRewardsForTicketId(\n                lotteryround, ticketid, bracket\n            ).call()\n\n            if data &gt; 0:\n                winnings = data / self.decimals\n\n        return winnings\n\n    def address_winnings(self, address, lotteryround):\n        \"\"\"Get lottery winnings (CAKE) for a given address and round\n\n        Args:\n            address (str): BSC address\n            lotteryround (int): Lottery round\n\n        Examples:\n            &gt;&gt;&gt; lottery.address_winnings(\"0x621D6ee5FA9634d86396C13fAaD6A7827606A6d7\", lotteryround=16)\n            {'tickets': 8, 'ticketids': [634970, 634971, 634972, 634973, 634974, 634975, 634976, 634977], 'winning_tickets': [634970, 634971]}\n        \"\"\"\n        userinfo = self.lottery_contract.functions.viewUserInfoForLotteryId(\n            self.w3.to_checksum_address(address),\n            lotteryround,\n            0,\n            100,\n        ).call()\n\n        count = 0\n        winning_tickets = []\n\n        for i in userinfo[2]:\n            if i is True:\n                winning_tickets.append(userinfo[0][count])\n            count += 1\n\n        d = {\n            \"tickets\": userinfo[3],\n            \"ticketids\": userinfo[0],\n            \"winning_tickets\": winning_tickets,\n        }\n\n        return d\n\n    def total_tickets(self, lotteryround):\n        \"\"\"Get total number of tickets in lottery round\n\n        Args:\n            lotteryround (int): Lottery round\n\n        Examples:\n            &gt;&gt;&gt; lottery.total_tickets(lotteryround=23)\n            0\n        \"\"\"\n        current_round = self.current_round()\n\n        if lotteryround &gt; current_round:\n            return 0\n\n        data = self.view_lottery(lotteryround)\n        first_ticket_id = data.get(\"firstTicketId\")\n        last_ticket_id = data.get(\"firstTicketIdNextLottery\")\n\n        return int(last_ticket_id - first_ticket_id)\n</code></pre>"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.__init__","title":"<code>__init__(provider='https://bsc-dataseed.binance.org')</code>","text":"<p>Initialize the object</p> <p>Attributes:</p> Name Type Description <code>provider</code> <code>str</code> <p>Web3 HTTPProvider.</p> <p>Defaults to https://bsc-dataseed.binance.org</p> <p>Examples:</p> <p>lottery = LotteryV2()</p> Source code in <code>pancakeswap_lottery/lotteryv2.py</code> <pre><code>def __init__(self, provider=\"https://bsc-dataseed.binance.org\"):\n    \"\"\"Initialize the object\n\n    Attributes:\n        provider (str): Web3 HTTPProvider.\n\n            Defaults to https://bsc-dataseed.binance.org\n\n    Examples:\n        lottery = LotteryV2()\n    \"\"\"\n    self.w3 = Web3(Web3.HTTPProvider(provider))\n\n    contract_addresses = {\n        \"PancakeSwapLottery\": \"0x5aF6D33DE2ccEC94efb1bDF8f92Bd58085432d2c\",\n        \"CakeToken\": \"0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82\",\n    }\n\n    self.lottery_contract = self._load_contract(\n        abi_name=\"PancakeSwapLottery\",\n        address=contract_addresses[\"PancakeSwapLottery\"],\n    )\n\n    self.token_contract = self._load_contract(\n        abi_name=\"CakeToken\", address=contract_addresses[\"CakeToken\"]\n    )\n\n    self.decimals = 10**18\n</code></pre>"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.address_winnings","title":"<code>address_winnings(address, lotteryround)</code>","text":"<p>Get lottery winnings (CAKE) for a given address and round</p> <p>Parameters:</p> Name Type Description Default <code>address</code> <code>str</code> <p>BSC address</p> required <code>lotteryround</code> <code>int</code> <p>Lottery round</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.address_winnings(\"0x621D6ee5FA9634d86396C13fAaD6A7827606A6d7\", lotteryround=16)\n{'tickets': 8, 'ticketids': [634970, 634971, 634972, 634973, 634974, 634975, 634976, 634977], 'winning_tickets': [634970, 634971]}\n</code></pre> Source code in <code>pancakeswap_lottery/lotteryv2.py</code> <pre><code>def address_winnings(self, address, lotteryround):\n    \"\"\"Get lottery winnings (CAKE) for a given address and round\n\n    Args:\n        address (str): BSC address\n        lotteryround (int): Lottery round\n\n    Examples:\n        &gt;&gt;&gt; lottery.address_winnings(\"0x621D6ee5FA9634d86396C13fAaD6A7827606A6d7\", lotteryround=16)\n        {'tickets': 8, 'ticketids': [634970, 634971, 634972, 634973, 634974, 634975, 634976, 634977], 'winning_tickets': [634970, 634971]}\n    \"\"\"\n    userinfo = self.lottery_contract.functions.viewUserInfoForLotteryId(\n        self.w3.to_checksum_address(address),\n        lotteryround,\n        0,\n        100,\n    ).call()\n\n    count = 0\n    winning_tickets = []\n\n    for i in userinfo[2]:\n        if i is True:\n            winning_tickets.append(userinfo[0][count])\n        count += 1\n\n    d = {\n        \"tickets\": userinfo[3],\n        \"ticketids\": userinfo[0],\n        \"winning_tickets\": winning_tickets,\n    }\n\n    return d\n</code></pre>"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.cake_per_bracket","title":"<code>cake_per_bracket(lotteryround)</code>","text":"<p>Get amount of CAKE won per ticket in each prize bracket</p> <p>Parameters:</p> Name Type Description Default <code>lotteryround</code> <code>int</code> <p>Lottery round</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.cake_per_bracket(lotteryround=16)\n{\n    'match_1': 0.10150861284172895,\n    'match_2': 3.0330519877680375,\n    'match_3': 61.98396668619574,\n    'match_4': 924.8401378575238,\n    'match_5': 38843.285790016,\n    'match_6': 77686.571580032\n}\n</code></pre> Source code in <code>pancakeswap_lottery/lotteryv2.py</code> <pre><code>def cake_per_bracket(self, lotteryround):\n    \"\"\"Get amount of CAKE won per ticket in each prize bracket\n\n    Args:\n        lotteryround (int): Lottery round\n\n    Examples:\n        &gt;&gt;&gt; lottery.cake_per_bracket(lotteryround=16)\n        {\n            'match_1': 0.10150861284172895,\n            'match_2': 3.0330519877680375,\n            'match_3': 61.98396668619574,\n            'match_4': 924.8401378575238,\n            'match_5': 38843.285790016,\n            'match_6': 77686.571580032\n        }\n    \"\"\"\n\n    data = self.view_lottery(lotteryround)\n    d = data.get(\"cakePerBracket\")\n\n    return d\n</code></pre>"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.current_round","title":"<code>current_round()</code>","text":"<p>Get current lottery round number</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.current_round()\n8\n</code></pre> Source code in <code>pancakeswap_lottery/lotteryv2.py</code> <pre><code>def current_round(self):\n    \"\"\"Get current lottery round number\n\n    Examples:\n        &gt;&gt;&gt; lottery.current_round()\n        8\n    \"\"\"\n    return self.lottery_contract.functions.currentLotteryId().call()\n</code></pre>"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.current_ticket","title":"<code>current_ticket()</code>","text":"<p>Get current ticket id</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.current_ticket()\n38963\n</code></pre> Source code in <code>pancakeswap_lottery/lotteryv2.py</code> <pre><code>def current_ticket(self):\n    \"\"\"Get current ticket id\n\n    Examples:\n        &gt;&gt;&gt; lottery.current_ticket()\n        38963\n    \"\"\"\n    return self.lottery_contract.functions.currentTicketId().call()\n</code></pre>"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.draw_date","title":"<code>draw_date(lotteryround=None)</code>","text":"<p>Get lottery draw date</p> <p>Parameters:</p> Name Type Description Default <code>lotteryround</code> <p>obj:<code>int</code>, optional): Lottery round</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.draw_date()\n141947\n</code></pre> Source code in <code>pancakeswap_lottery/lotteryv2.py</code> <pre><code>def draw_date(self, lotteryround=None):\n    \"\"\"Get lottery draw date\n\n    Args:\n        lotteryround (:obj:`int`, optional): Lottery round\n\n    Examples:\n        &gt;&gt;&gt; lottery.draw_date()\n        141947\n    \"\"\"\n\n    if not lotteryround:\n        lotteryround = self.current_round()\n\n    lottery = self.view_lottery(lotteryround)\n    lotter_date = lottery.get(\"endTime\")\n\n    return lotter_date\n</code></pre>"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.prize_pool","title":"<code>prize_pool(lotteryround=None)</code>","text":"<p>Get total prize pool size in CAKE</p> <p>Parameters:</p> Name Type Description Default <code>lotteryround</code> <p>obj:<code>int</code>, optional): Lottery round</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.prize_pool()\n141947\n</code></pre> Source code in <code>pancakeswap_lottery/lotteryv2.py</code> <pre><code>def prize_pool(self, lotteryround=None):\n    \"\"\"Get total prize pool size in CAKE\n\n    Args:\n        lotteryround (:obj:`int`, optional): Lottery round\n\n    Examples:\n        &gt;&gt;&gt; lottery.prize_pool()\n        141947\n    \"\"\"\n\n    if not lotteryround:\n        lotteryround = self.current_round()\n\n    data = self.view_lottery(lotteryround)\n    amount = data.get(\"amountCollectedInCake\")\n\n    return round(amount)\n</code></pre>"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.prize_pool_allocation","title":"<code>prize_pool_allocation(lotteryround=None)</code>","text":"<p>Get prize pool allocation in CAKE</p> <p>Allocation percentages: - Match first 1: 1% - Match first 2: 3% - Match first 3: 6% - Match first 4: 10% - Match first 5: 20% - Match first 6: 40% - Burn Pool: 20%</p> <p>Parameters:</p> Name Type Description Default <code>lotteryround</code> <p>obj:<code>int</code>, optional): Lottery round</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.prize_pool_allocation()\n{\n    'match_1': 1419,\n    'match_2': 4258,\n    'match_3': 8517,\n    'match_4': 14195,\n    'match_5': 28389,\n    'match_6': 56779,\n    'burn': 28389\n}\n</code></pre> Source code in <code>pancakeswap_lottery/lotteryv2.py</code> <pre><code>def prize_pool_allocation(self, lotteryround=None):\n    \"\"\"Get prize pool allocation in CAKE\n\n    Allocation percentages:\n    - Match first 1: 1%\n    - Match first 2: 3%\n    - Match first 3: 6%\n    - Match first 4: 10%\n    - Match first 5: 20%\n    - Match first 6: 40%\n    - Burn Pool: 20%\n\n    Args:\n        lotteryround (:obj:`int`, optional): Lottery round\n\n    Examples:\n        &gt;&gt;&gt; lottery.prize_pool_allocation()\n        {\n            'match_1': 1419,\n            'match_2': 4258,\n            'match_3': 8517,\n            'match_4': 14195,\n            'match_5': 28389,\n            'match_6': 56779,\n            'burn': 28389\n        }\n    \"\"\"\n    if not lotteryround:\n        lotteryround = self.current_round()\n\n    data = self.view_lottery(lotteryround)\n    prize_pool = data.get(\"amountCollectedInCake\")\n\n    d = {\n        \"match_1\": round(prize_pool * 0.01),\n        \"match_2\": round(prize_pool * 0.03),\n        \"match_3\": round(prize_pool * 0.06),\n        \"match_4\": round(prize_pool * 0.1),\n        \"match_5\": round(prize_pool * 0.2),\n        \"match_6\": round(prize_pool * 0.4),\n        \"burn\": round(prize_pool * 0.2),\n    }\n\n    return d\n</code></pre>"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.status","title":"<code>status(lotteryround=None)</code>","text":"<p>Get status of lottery round</p> <p>Parameters:</p> Name Type Description Default <code>lotteryround</code> <p>obj:<code>int</code>, optional): Lottery round</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.status()\nOpen\n</code></pre> Source code in <code>pancakeswap_lottery/lotteryv2.py</code> <pre><code>def status(self, lotteryround=None):\n    \"\"\"Get status of lottery round\n\n    Args:\n        lotteryround (:obj:`int`, optional): Lottery round\n\n    Examples:\n        &gt;&gt;&gt; lottery.status()\n        Open\n    \"\"\"\n\n    if not lotteryround:\n        lotteryround = self.current_round()\n\n    data = self.view_lottery(lotteryround)\n    lottery_status = data.get(\"status\")\n\n    return lottery_status\n</code></pre>"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.ticket_price","title":"<code>ticket_price(lotteryround=None)</code>","text":"<p>Get ticket price in CAKE</p> <p>Parameters:</p> Name Type Description Default <code>lotteryround</code> <p>obj:<code>int</code>, optional): Lottery round</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.ticket_price()\n0.34\n</code></pre> Source code in <code>pancakeswap_lottery/lotteryv2.py</code> <pre><code>def ticket_price(self, lotteryround=None):\n    \"\"\"Get ticket price in CAKE\n\n    Args:\n        lotteryround (:obj:`int`, optional): Lottery round\n\n    Examples:\n        &gt;&gt;&gt; lottery.ticket_price()\n        0.34\n    \"\"\"\n\n    if not lotteryround:\n        lotteryround = self.current_round()\n\n    lottery = self.view_lottery(lotteryround)\n    price = lottery.get(\"priceTicketInCake\")\n\n    return price\n</code></pre>"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.ticket_winnings","title":"<code>ticket_winnings(lotteryround, ticketid)</code>","text":"<p>Get lottery winnings (CAKE) for a given ticket and round</p> <p>Parameters:</p> Name Type Description Default <code>lotteryround</code> <code>int</code> <p>Lottery round</p> required <code>ticketid</code> <code>int</code> <p>Ticket id</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.ticket_winnings(lotteryround=15, ticketid=567093)\n865.536634168\n</code></pre> Source code in <code>pancakeswap_lottery/lotteryv2.py</code> <pre><code>def ticket_winnings(self, lotteryround, ticketid):\n    \"\"\"Get lottery winnings (CAKE) for a given ticket and round\n\n    Args:\n        lotteryround (int): Lottery round\n        ticketid (int): Ticket id\n\n    Examples:\n        &gt;&gt;&gt; lottery.ticket_winnings(lotteryround=15, ticketid=567093)\n        865.536634168\n    \"\"\"\n    winnings = 0\n    brackets = [0, 1, 2, 3, 4, 5]\n\n    for bracket in brackets:\n        data = self.lottery_contract.functions.viewRewardsForTicketId(\n            lotteryround, ticketid, bracket\n        ).call()\n\n        if data &gt; 0:\n            winnings = data / self.decimals\n\n    return winnings\n</code></pre>"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.total_tickets","title":"<code>total_tickets(lotteryround)</code>","text":"<p>Get total number of tickets in lottery round</p> <p>Parameters:</p> Name Type Description Default <code>lotteryround</code> <code>int</code> <p>Lottery round</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.total_tickets(lotteryround=23)\n0\n</code></pre> Source code in <code>pancakeswap_lottery/lotteryv2.py</code> <pre><code>def total_tickets(self, lotteryround):\n    \"\"\"Get total number of tickets in lottery round\n\n    Args:\n        lotteryround (int): Lottery round\n\n    Examples:\n        &gt;&gt;&gt; lottery.total_tickets(lotteryround=23)\n        0\n    \"\"\"\n    current_round = self.current_round()\n\n    if lotteryround &gt; current_round:\n        return 0\n\n    data = self.view_lottery(lotteryround)\n    first_ticket_id = data.get(\"firstTicketId\")\n    last_ticket_id = data.get(\"firstTicketIdNextLottery\")\n\n    return int(last_ticket_id - first_ticket_id)\n</code></pre>"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.winners_per_bracket","title":"<code>winners_per_bracket(lotteryround)</code>","text":"<p>Get number of winners per prize bracket</p> <p>Parameters:</p> Name Type Description Default <code>lotteryround</code> <code>int</code> <p>Lottery round</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.winners_per_bracket(lotteryround=16)\n{\n    'match_1': 19133,\n    'match_2': 1921,\n    'match_3': 188,\n    'match_4': 21,\n    'match_5': 1,\n    'match_6': 1\n}\n</code></pre> Source code in <code>pancakeswap_lottery/lotteryv2.py</code> <pre><code>def winners_per_bracket(self, lotteryround):\n    \"\"\"Get number of winners per prize bracket\n\n    Args:\n        lotteryround (int): Lottery round\n\n    Examples:\n        &gt;&gt;&gt; lottery.winners_per_bracket(lotteryround=16)\n        {\n            'match_1': 19133,\n            'match_2': 1921,\n            'match_3': 188,\n            'match_4': 21,\n            'match_5': 1,\n            'match_6': 1\n        }\n    \"\"\"\n\n    data = self.view_lottery(lotteryround)\n    d = data.get(\"countWinnersPerBracket\")\n\n    return d\n</code></pre>"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.winning_numbers","title":"<code>winning_numbers(lotteryround)</code>","text":"<p>Get winning numbers for lottery round</p> <p>Parameters:</p> Name Type Description Default <code>lotteryround</code> <code>int</code> <p>Lottery round</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.winning_numbers(lotteryround=16)\n0\n</code></pre> Source code in <code>pancakeswap_lottery/lotteryv2.py</code> <pre><code>def winning_numbers(self, lotteryround):\n    \"\"\"Get winning numbers for lottery round\n\n    Args:\n        lotteryround (int): Lottery round\n\n    Examples:\n        &gt;&gt;&gt; lottery.winning_numbers(lotteryround=16)\n        0\n    \"\"\"\n    data = self.view_lottery(lotteryround)\n    final_number = str(data.get(\"finalNumber\"))\n    final_number = final_number[::-1][:-1]\n\n    return final_number\n</code></pre>"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.winning_probability","title":"<code>winning_probability(numbers_matched=None)</code>","text":"<p>Get percentage probability of winning the lottery</p> <p>Parameters:</p> Name Type Description Default <code>numbers_matched</code> <p>obj:<code>int</code>, optional): Number of winning numbers matched</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.winning_probability()\n{\n    'match_1': 10.0,\n    'match_2': 1.0,\n    'match_3': 0.1,\n    'match_4': 0.01,\n    'match_5': 0.001,\n    'match_6': 0.0001\n}\n</code></pre> Source code in <code>pancakeswap_lottery/lotteryv2.py</code> <pre><code>def winning_probability(self, numbers_matched=None):\n    \"\"\"Get percentage probability of winning the lottery\n\n    Args:\n        numbers_matched (:obj:`int`, optional): Number of winning numbers matched\n\n    Examples:\n        &gt;&gt;&gt; lottery.winning_probability()\n        {\n            'match_1': 10.0,\n            'match_2': 1.0,\n            'match_3': 0.1,\n            'match_4': 0.01,\n            'match_5': 0.001,\n            'match_6': 0.0001\n        }\n    \"\"\"\n    possible_numbers = 10\n    matchballs = [1, 2, 3, 4, 5, 6]\n    probability_pct = {}\n\n    if numbers_matched:\n        if numbers_matched not in range(1, 7):\n            return \"Pick a number between 1 and 6\"\n\n        e = possible_numbers**numbers_matched\n        odds = 1 / e * 100\n\n        return float(f\"{odds:.4f}\")\n\n    for matchball in matchballs:\n        e = possible_numbers**matchball\n        odds = 1 / e * 100\n        probability_pct.update({f\"match_{matchball}\": float(f\"{odds:.4f}\")})\n\n    return probability_pct\n</code></pre>"},{"location":"guide/","title":"Introduction","text":""},{"location":"guide/#import-lottery","title":"Import Lottery","text":"<pre><code>from pancakeswap_lottery import LotteryV2\n</code></pre>"},{"location":"guide/#create-instance","title":"Create Instance","text":"<p>To retrieve data from the lottery smart-contract, create an instance of the <code>LotteryV2</code> class:</p> <pre><code>lottery = LotteryV2()\n</code></pre>"},{"location":"guide/#example","title":"Example","text":"<pre><code>from pancakeswap_lottery import LotteryV2\n\nlottery = LotteryV2()\n\n# Lottery draw date and time of lottery round draw\ndraw_date = lottery.draw_date(lotteryround=16)\n\n# Total prize pool of lottery round\nprize_pool = lottery.prize_pool(lotteryround=16)\n</code></pre> <p>For more examples, see Examples.</p>"},{"location":"guide/examples/","title":"Examples","text":"<p>Here's a few example use cases for this module:</p> <ul> <li>Lottery stats - Current lottery round stats</li> <li>Lottery history - Past lottery rounds stats</li> </ul>"},{"location":"guide/examples/#lottery-stats","title":"Lottery stats","text":"<p>Get stats from the current lottery round.</p> Code <pre><code>from datetime import datetime\nfrom pancakeswap_lottery import LotteryV2\n\n\ndef format_datestr(dt):\n    now = datetime.now().astimezone()\n    total_seconds = int((dt - now).total_seconds())\n\n    days, remainder = divmod(total_seconds, 86400)\n    hours, remainder = divmod(remainder, 3600)\n    minutes, seconds = divmod(remainder, 60)\n\n    d = {\n        \"total_seconds\": total_seconds,\n        \"days\": int(days),\n        \"hours\": int(hours),\n        \"minutes\": int(minutes),\n        \"seconds\": int(seconds),\n    }\n\n    if d[\"hours\"] == 0:\n        datestr = f\"{d['minutes']} minutes\"\n    else:\n        datestr = f\"{d['hours']} hours {d['minutes']} minutes\"\n\n    return datestr\n\n\ndef get_lottery_stats():\n    lottery = LotteryV2()\n\n    lotteryround = lottery.current_round()\n    prize_pool = lottery.prize_pool()\n\n    draw_date = lottery.draw_date(lotteryround).astimezone()\n    drawdate_str = format_datestr(draw_date)\n\n    allocation = lottery.prize_pool_allocation()\n\n    prize_pool_match1 = allocation.get(\"match_1\")\n    prize_pool_match2 = allocation.get(\"match_2\")\n    prize_pool_match3 = allocation.get(\"match_3\")\n    prize_pool_match4 = allocation.get(\"match_4\")\n    prize_pool_match5 = allocation.get(\"match_5\")\n    prize_pool_match6 = allocation.get(\"match_6\")\n\n    ret_str = \"\ud83e\udd5e The CAKE Lottery \ud83e\udd5e\"\n    ret_str += f\"\\nRound #{lotteryround}\"\n    ret_str += f\"\\nDraw in {drawdate_str} ({draw_date})\"\n\n    ret_str += \"\\n\\n\ud83d\udcb0 Prize pool\"\n    ret_str += f\"\\n{int(prize_pool)} CAKE\"\n\n    ret_str += \"\\n\\n\ud83d\udcb5 Prize pool allocation\"\n    ret_str += f\"\\nMatch 6: {prize_pool_match6} CAKE\"\n    ret_str += f\"\\nMatch 5: {prize_pool_match5} CAKE\"\n    ret_str += f\"\\nMatch 4: {prize_pool_match4} CAKE\"\n    ret_str += f\"\\nMatch 3: {prize_pool_match3} CAKE\"\n    ret_str += f\"\\nMatch 2: {prize_pool_match2} CAKE\"\n    ret_str += f\"\\nMatch 1: {prize_pool_match1} CAKE\"\n\n    return ret_str\n\n\nlottery_stats = get_lottery_stats()\nprint(lottery_stats)\n</code></pre> Output <pre><code>\ud83e\udd5e The CAKE Lottery \ud83e\udd5e\nRound #20\nDraw in 5 hours 40 minutes (2021-07-12 20:00:00+02:00)\n\n\ud83d\udcb0 Prize pool\n63402 CAKE\n\n\ud83d\udcb5 Prize pool allocation\nMatch 6: 25361 CAKE\nMatch 5: 12680 CAKE\nMatch 4: 6340 CAKE\nMatch 3: 3804 CAKE\nMatch 2: 1902 CAKE\nMatch 1: 634 CAKE\n</code></pre>"},{"location":"guide/examples/#lottery-history","title":"Lottery history","text":"<p>Get lottery history data (Lottery Date, Round, Prize pool) from the last <code>X</code> rounds.</p> Code <pre><code>from pancakeswap_lottery import LotteryV2\n\n\ndef get_lottery_history(last_rounds):\n    lottery = LotteryV2()\n\n    lotteryround = lottery.current_round()\n\n    header = [\"Lottery Date\", \"Round\", \"Prizes (CAKE)\"]\n    rows = [header]\n\n    for i in range(0, last_rounds):\n        lotteryround -= 1\n\n        draw_date = lottery.draw_date(lotteryround)\n        draw_date_str = draw_date.strftime(\"%Y-%m-%d %H:%M\")\n\n        prize_pool = int(lottery.prize_pool(lotteryround))\n\n        row = [draw_date_str, lotteryround, prize_pool]\n        rows.append(row)\n\n    ret_str = \"\ud83e\udd5e The CAKE Lottery - History\\n\"\n    ret_str += f\"\\nLast {last_rounds} lottery rounds:\\n\\n\"\n    ret_str += \"\\n\".join([\"\".join([f\"{x:&gt;16}\" for x in r]) for r in rows])\n\n    return ret_str\n\n\nrounds = 10  # get data for last 10 rounds\nlottery_history = get_lottery_history(rounds)\nprint(lottery_history)\n</code></pre> Output <pre><code>\ud83e\udd5e The CAKE Lottery - History\n\nLast 10 lottery rounds:\n\n    Lottery Date           Round   Prizes (CAKE)\n2021-07-12 08:00              19           77631\n2021-07-11 20:00              18          145392\n2021-07-11 08:00              17            5009\n2021-07-10 20:00              16          194216\n2021-07-10 08:00              15           86554\n2021-07-09 20:00              14          100345\n2021-07-09 08:00              13            7988\n2021-07-08 20:00              12          130175\n2021-07-08 08:00              11           76197\n2021-07-07 20:00              10          141947\n</code></pre>"},{"location":"guide/functions/","title":"Functions","text":""},{"location":"guide/functions/#lottery-v2","title":"Lottery V2","text":"<ul> <li>current_round - Get current lottery round number</li> <li>current_ticket - Get current ticket id</li> <li>status - Get status of lottery round</li> <li>draw_date - Get lottery draw date</li> <li>ticket_price - Get ticket price in CAKE</li> <li>prize_pool - Get total prize pool size in CAKE</li> <li>prize_pool_allocation - Get prize pool allocation in CAKE</li> <li>total_tickets - Get total number of tickets in lottery round</li> <li>winning_numbers - Get winning numbers for lottery round</li> <li>address_winnings - Get lottery winnings (CAKE) for a given address and round</li> <li>ticket_winnings - Get lottery winnings (CAKE) for a given ticket and round</li> <li>winners_per_bracket - Get number of winners per prize bracket</li> <li>cake_per_bracket - Get amount of CAKE won per ticket in each prize bracket</li> <li>winning_probability - Get percentage probability of winning the lottery</li> </ul>"},{"location":"v1/reference/","title":"Code Reference","text":"<p>Class for accessing PancakeSwap Lottery smart-contract information.</p> Source code in <code>pancakeswap_lottery/lottery.py</code> <pre><code>class Lottery:\n    \"\"\"Class for accessing PancakeSwap Lottery smart-contract information.\"\"\"\n\n    def __init__(self, provider=\"https://bsc-dataseed.binance.org:443\"):\n        \"\"\"Initialize the object\n\n        Attributes:\n            provider (str): Web3 HTTPProvider.\n\n                Defaults to https://bsc-dataseed.binance.org:443\n\n        Examples:\n            lottery = Lottery()\n        \"\"\"\n        self.w3 = Web3(Web3.HTTPProvider(provider))\n\n        contract_addresses = {\n            \"LotteryUpgradeProxy\": \"0x3C3f2049cc17C136a604bE23cF7E42745edf3b91\",\n            \"LotteryNFT\": \"0x5e74094Cd416f55179DBd0E45b1a8ED030e396A1\",\n        }\n\n        self.lottery_contract = self._load_contract(\n            abi_name=\"LotteryUpgradeProxy\",\n            address=contract_addresses[\"LotteryUpgradeProxy\"],\n        )\n\n        self.token_contract = self._load_contract(\n            abi_name=\"LotteryNFT\", address=contract_addresses[\"LotteryNFT\"]\n        )\n\n        self.decimals = 10 ** 18\n\n    def _load_contract(self, abi_name, address):\n        return self.w3.eth.contract(address=address, abi=load_abi(abi_name))\n\n    def get_total_rewards(self, issue_index):\n        \"\"\"Get total rewards of lottery round\n\n        Args:\n            issue_index (int): Lottery round\n\n        Examples:\n            &gt;&gt;&gt; lottery.get_total_rewards(432)\n            51384.125\n        \"\"\"\n        total_rewards = self.lottery_contract.functions.getTotalRewards(\n            issue_index\n        ).call()\n\n        return total_rewards / self.decimals\n\n    def get_lottery_date(self, issue_index):\n        \"\"\"Get date and time of lottery round\n\n        Args:\n            issue_index (int): Lottery round\n\n        Examples:\n            &gt;&gt;&gt; lottery.get_lottery_date(432)\n            2021-03-26 02:00:00+00:00\n        \"\"\"\n        lottery_date = generate_lottery_date(issue_index)\n\n        return lottery_date\n\n    def get_drawed(self):\n        \"\"\"Check if current lottery round is drawed\n\n        Examples:\n            &gt;&gt;&gt; lottery.get_drawed()\n            False\n        \"\"\"\n        return self.lottery_contract.functions.drawed().call()\n\n    def get_drawing_phase(self):\n        \"\"\"Get current lottery round drawing phase\n\n        Examples:\n            &gt;&gt;&gt; lottery.get_drawing_phase()\n            False\n        \"\"\"\n        return self.lottery_contract.functions.drawingPhase().call()\n\n    def get_matching_reward_amount(self, issue_index, matching_num):\n        \"\"\"Get number of tickets matched a specified number\n\n        Args:\n            issue_index (int): Lottery round\n            matching_num (int): Number to match\n\n        Examples:\n            &gt;&gt;&gt; lottery.get_matching_reward_amount(432, 3)\n            34\n        \"\"\"\n        matching_reward_amount = (\n            self.lottery_contract.functions.getMatchingRewardAmount(\n                issue_index, matching_num\n            ).call()\n        )\n\n        return int(matching_reward_amount / self.decimals)\n\n    def get_lottery_numbers(self, tokenid):\n        \"\"\"Get lottery numbers for a given ticket\n\n        Args:\n            tokenid (int): Lottery ticket id\n\n        Examples:\n            &gt;&gt;&gt; lottery.get_lottery_numbers(1328060)\n            [11, 5, 14, 6]\n        \"\"\"\n        return self.token_contract.functions.getLotteryNumbers(tokenid).call()\n\n    def get_reward_view(self, tokenid):\n        \"\"\"Get rewards for a given ticket\n\n        Args:\n            tokenid (int): Lottery ticket id\n\n        Examples:\n            &gt;&gt;&gt; lottery.get_reward_view(1328060)\n            0\n        \"\"\"\n        return self.lottery_contract.functions.getRewardView(tokenid).call()\n\n    def get_history_numbers(self, issue_index):\n        \"\"\"Get winning numbers of lottery round\n\n        Args:\n            issue_index (int): Lottery round\n\n        Examples:\n            &gt;&gt;&gt; lottery.get_history_numbers(432)\n            [2, 13, 7, 3]\n        \"\"\"\n        history_numbers = []\n\n        for i in range(0, 4):\n            number = self.lottery_contract.functions.historyNumbers(\n                issue_index, i\n            ).call()\n            history_numbers.append(number)\n\n        return history_numbers\n\n    def get_history_amount(self, issue_index):\n        \"\"\"Get numbers of tickets matched\n\n        Args:\n            issue_index (int): Lottery round\n\n        Examples:\n            &gt;&gt;&gt; lottery.get_history_amount(432)\n            {'4': 1, '3': 34, '2': 718}\n        \"\"\"\n        history_amount = {}\n\n        for i in range(1, 4):\n            winner = self.lottery_contract.functions.historyAmount(\n                issue_index, i\n            ).call()\n\n            if i == 1:\n                history_amount[\"4\"] = int(winner / self.decimals)\n            elif i == 2:\n                history_amount[\"3\"] = int(winner / self.decimals)\n            elif i == 3:\n                history_amount[\"2\"] = int(winner / self.decimals)\n\n        return history_amount\n\n    def get_issue_index(self):\n        \"\"\"Get current lottery round id\n\n        Examples:\n            &gt;&gt;&gt; lottery.get_issue_index()\n            435\n        \"\"\"\n        return self.lottery_contract.functions.issueIndex().call()\n\n    def get_last_timestamp(self, epoch=False):\n        \"\"\"Last updated (timestamp)\n\n        Args:\n            epoch (bool): Return as epoch timestamp?\n\n        Examples:\n            &gt;&gt;&gt; lottery.get_last_timestamp(epoch=False)\n            2021-03-27 11:38:49\n        \"\"\"\n        last_timestamp = self.lottery_contract.functions.lastTimestamp().call()\n\n        if epoch:\n            return last_timestamp\n        else:\n            return datetime.fromtimestamp(last_timestamp)\n\n    def get_max_number(self):\n        \"\"\"Get max number\n\n        Examples:\n            &gt;&gt;&gt; lottery.get_max_number()\n            14\n        \"\"\"\n        return self.lottery_contract.functions.maxNumber().call()\n\n    def get_min_price(self):\n        \"\"\"Get current price of 1 ticket\n\n        Examples:\n            &gt;&gt;&gt; lottery.get_min_price()\n            1\n        \"\"\"\n        min_price = self.lottery_contract.functions.minPrice().call()\n\n        return int(min_price / self.decimals)\n\n    def get_total_addresses(self):\n        \"\"\"Get total addresses\n\n        Examples:\n            &gt;&gt;&gt; lottery.get_total_addresses()\n            200\n        \"\"\"\n        return self.lottery_contract.functions.totalAddresses().call()\n\n    def get_total_amount(self):\n        \"\"\"Get total pot (CAKE) of current lottery round\n\n        Examples:\n            &gt;&gt;&gt; lottery.get_total_amount()\n            34977.25\n        \"\"\"\n        total_amount = self.lottery_contract.functions.totalAmount().call()\n\n        return total_amount / self.decimals\n\n    def get_allocation(self):\n        \"\"\"Get prize pool allocation (percent)\n\n        Examples:\n            &gt;&gt;&gt; lottery.get_allocation()\n            {'1': 50, '2': 20, '3': 10}\n        \"\"\"\n        allocation = {}\n\n        for i in range(0, 3):\n            alloc = self.lottery_contract.functions.allocation(i).call()\n            allocation[f\"{i + 1}\"] = alloc\n\n        return allocation\n\n    def get_cake(self):\n        \"\"\"Get CAKE contract address\n\n        Examples:\n            &gt;&gt;&gt; lottery.get_cake()\n            0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82\n        \"\"\"\n        return self.lottery_contract.functions.cake().call()\n\n    def get_lotteryNFT(self):\n        \"\"\"Get PLT-token contract address\n\n        Examples:\n            &gt;&gt;&gt; lottery.get_lotteryNFT()\n            0x5e74094Cd416f55179DBd0E45b1a8ED030e396A1\n        \"\"\"\n        return self.lottery_contract.functions.lotteryNFT().call()\n\n    def get_balance_of(self, address):\n        \"\"\"Get total number of tickets bought by a given address\n\n        Args:\n            address (str): BSC address\n\n        Examples:\n            &gt;&gt;&gt; lottery.get_balance_of(\"0xc13456A34305e9265E907F70f76B1BA6E2055c8B\")\n            2673\n        \"\"\"\n        return self.token_contract.functions.balanceOf(address).call()\n</code></pre>"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.__init__","title":"<code>__init__(provider='https://bsc-dataseed.binance.org:443')</code>","text":"<p>Initialize the object</p> <p>Attributes:</p> Name Type Description <code>provider</code> <code>str</code> <p>Web3 HTTPProvider.</p> <p>Defaults to https://bsc-dataseed.binance.org:443</p> <p>Examples:</p> <p>lottery = Lottery()</p> Source code in <code>pancakeswap_lottery/lottery.py</code> <pre><code>def __init__(self, provider=\"https://bsc-dataseed.binance.org:443\"):\n    \"\"\"Initialize the object\n\n    Attributes:\n        provider (str): Web3 HTTPProvider.\n\n            Defaults to https://bsc-dataseed.binance.org:443\n\n    Examples:\n        lottery = Lottery()\n    \"\"\"\n    self.w3 = Web3(Web3.HTTPProvider(provider))\n\n    contract_addresses = {\n        \"LotteryUpgradeProxy\": \"0x3C3f2049cc17C136a604bE23cF7E42745edf3b91\",\n        \"LotteryNFT\": \"0x5e74094Cd416f55179DBd0E45b1a8ED030e396A1\",\n    }\n\n    self.lottery_contract = self._load_contract(\n        abi_name=\"LotteryUpgradeProxy\",\n        address=contract_addresses[\"LotteryUpgradeProxy\"],\n    )\n\n    self.token_contract = self._load_contract(\n        abi_name=\"LotteryNFT\", address=contract_addresses[\"LotteryNFT\"]\n    )\n\n    self.decimals = 10 ** 18\n</code></pre>"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_allocation","title":"<code>get_allocation()</code>","text":"<p>Get prize pool allocation (percent)</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.get_allocation()\n{'1': 50, '2': 20, '3': 10}\n</code></pre> Source code in <code>pancakeswap_lottery/lottery.py</code> <pre><code>def get_allocation(self):\n    \"\"\"Get prize pool allocation (percent)\n\n    Examples:\n        &gt;&gt;&gt; lottery.get_allocation()\n        {'1': 50, '2': 20, '3': 10}\n    \"\"\"\n    allocation = {}\n\n    for i in range(0, 3):\n        alloc = self.lottery_contract.functions.allocation(i).call()\n        allocation[f\"{i + 1}\"] = alloc\n\n    return allocation\n</code></pre>"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_balance_of","title":"<code>get_balance_of(address)</code>","text":"<p>Get total number of tickets bought by a given address</p> <p>Parameters:</p> Name Type Description Default <code>address</code> <code>str</code> <p>BSC address</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.get_balance_of(\"0xc13456A34305e9265E907F70f76B1BA6E2055c8B\")\n2673\n</code></pre> Source code in <code>pancakeswap_lottery/lottery.py</code> <pre><code>def get_balance_of(self, address):\n    \"\"\"Get total number of tickets bought by a given address\n\n    Args:\n        address (str): BSC address\n\n    Examples:\n        &gt;&gt;&gt; lottery.get_balance_of(\"0xc13456A34305e9265E907F70f76B1BA6E2055c8B\")\n        2673\n    \"\"\"\n    return self.token_contract.functions.balanceOf(address).call()\n</code></pre>"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_cake","title":"<code>get_cake()</code>","text":"<p>Get CAKE contract address</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.get_cake()\n0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82\n</code></pre> Source code in <code>pancakeswap_lottery/lottery.py</code> <pre><code>def get_cake(self):\n    \"\"\"Get CAKE contract address\n\n    Examples:\n        &gt;&gt;&gt; lottery.get_cake()\n        0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82\n    \"\"\"\n    return self.lottery_contract.functions.cake().call()\n</code></pre>"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_drawed","title":"<code>get_drawed()</code>","text":"<p>Check if current lottery round is drawed</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.get_drawed()\nFalse\n</code></pre> Source code in <code>pancakeswap_lottery/lottery.py</code> <pre><code>def get_drawed(self):\n    \"\"\"Check if current lottery round is drawed\n\n    Examples:\n        &gt;&gt;&gt; lottery.get_drawed()\n        False\n    \"\"\"\n    return self.lottery_contract.functions.drawed().call()\n</code></pre>"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_drawing_phase","title":"<code>get_drawing_phase()</code>","text":"<p>Get current lottery round drawing phase</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.get_drawing_phase()\nFalse\n</code></pre> Source code in <code>pancakeswap_lottery/lottery.py</code> <pre><code>def get_drawing_phase(self):\n    \"\"\"Get current lottery round drawing phase\n\n    Examples:\n        &gt;&gt;&gt; lottery.get_drawing_phase()\n        False\n    \"\"\"\n    return self.lottery_contract.functions.drawingPhase().call()\n</code></pre>"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_history_amount","title":"<code>get_history_amount(issue_index)</code>","text":"<p>Get numbers of tickets matched</p> <p>Parameters:</p> Name Type Description Default <code>issue_index</code> <code>int</code> <p>Lottery round</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.get_history_amount(432)\n{'4': 1, '3': 34, '2': 718}\n</code></pre> Source code in <code>pancakeswap_lottery/lottery.py</code> <pre><code>def get_history_amount(self, issue_index):\n    \"\"\"Get numbers of tickets matched\n\n    Args:\n        issue_index (int): Lottery round\n\n    Examples:\n        &gt;&gt;&gt; lottery.get_history_amount(432)\n        {'4': 1, '3': 34, '2': 718}\n    \"\"\"\n    history_amount = {}\n\n    for i in range(1, 4):\n        winner = self.lottery_contract.functions.historyAmount(\n            issue_index, i\n        ).call()\n\n        if i == 1:\n            history_amount[\"4\"] = int(winner / self.decimals)\n        elif i == 2:\n            history_amount[\"3\"] = int(winner / self.decimals)\n        elif i == 3:\n            history_amount[\"2\"] = int(winner / self.decimals)\n\n    return history_amount\n</code></pre>"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_history_numbers","title":"<code>get_history_numbers(issue_index)</code>","text":"<p>Get winning numbers of lottery round</p> <p>Parameters:</p> Name Type Description Default <code>issue_index</code> <code>int</code> <p>Lottery round</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.get_history_numbers(432)\n[2, 13, 7, 3]\n</code></pre> Source code in <code>pancakeswap_lottery/lottery.py</code> <pre><code>def get_history_numbers(self, issue_index):\n    \"\"\"Get winning numbers of lottery round\n\n    Args:\n        issue_index (int): Lottery round\n\n    Examples:\n        &gt;&gt;&gt; lottery.get_history_numbers(432)\n        [2, 13, 7, 3]\n    \"\"\"\n    history_numbers = []\n\n    for i in range(0, 4):\n        number = self.lottery_contract.functions.historyNumbers(\n            issue_index, i\n        ).call()\n        history_numbers.append(number)\n\n    return history_numbers\n</code></pre>"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_issue_index","title":"<code>get_issue_index()</code>","text":"<p>Get current lottery round id</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.get_issue_index()\n435\n</code></pre> Source code in <code>pancakeswap_lottery/lottery.py</code> <pre><code>def get_issue_index(self):\n    \"\"\"Get current lottery round id\n\n    Examples:\n        &gt;&gt;&gt; lottery.get_issue_index()\n        435\n    \"\"\"\n    return self.lottery_contract.functions.issueIndex().call()\n</code></pre>"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_last_timestamp","title":"<code>get_last_timestamp(epoch=False)</code>","text":"<p>Last updated (timestamp)</p> <p>Parameters:</p> Name Type Description Default <code>epoch</code> <code>bool</code> <p>Return as epoch timestamp?</p> <code>False</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.get_last_timestamp(epoch=False)\n2021-03-27 11:38:49\n</code></pre> Source code in <code>pancakeswap_lottery/lottery.py</code> <pre><code>def get_last_timestamp(self, epoch=False):\n    \"\"\"Last updated (timestamp)\n\n    Args:\n        epoch (bool): Return as epoch timestamp?\n\n    Examples:\n        &gt;&gt;&gt; lottery.get_last_timestamp(epoch=False)\n        2021-03-27 11:38:49\n    \"\"\"\n    last_timestamp = self.lottery_contract.functions.lastTimestamp().call()\n\n    if epoch:\n        return last_timestamp\n    else:\n        return datetime.fromtimestamp(last_timestamp)\n</code></pre>"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_lotteryNFT","title":"<code>get_lotteryNFT()</code>","text":"<p>Get PLT-token contract address</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.get_lotteryNFT()\n0x5e74094Cd416f55179DBd0E45b1a8ED030e396A1\n</code></pre> Source code in <code>pancakeswap_lottery/lottery.py</code> <pre><code>def get_lotteryNFT(self):\n    \"\"\"Get PLT-token contract address\n\n    Examples:\n        &gt;&gt;&gt; lottery.get_lotteryNFT()\n        0x5e74094Cd416f55179DBd0E45b1a8ED030e396A1\n    \"\"\"\n    return self.lottery_contract.functions.lotteryNFT().call()\n</code></pre>"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_lottery_date","title":"<code>get_lottery_date(issue_index)</code>","text":"<p>Get date and time of lottery round</p> <p>Parameters:</p> Name Type Description Default <code>issue_index</code> <code>int</code> <p>Lottery round</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.get_lottery_date(432)\n2021-03-26 02:00:00+00:00\n</code></pre> Source code in <code>pancakeswap_lottery/lottery.py</code> <pre><code>def get_lottery_date(self, issue_index):\n    \"\"\"Get date and time of lottery round\n\n    Args:\n        issue_index (int): Lottery round\n\n    Examples:\n        &gt;&gt;&gt; lottery.get_lottery_date(432)\n        2021-03-26 02:00:00+00:00\n    \"\"\"\n    lottery_date = generate_lottery_date(issue_index)\n\n    return lottery_date\n</code></pre>"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_lottery_numbers","title":"<code>get_lottery_numbers(tokenid)</code>","text":"<p>Get lottery numbers for a given ticket</p> <p>Parameters:</p> Name Type Description Default <code>tokenid</code> <code>int</code> <p>Lottery ticket id</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.get_lottery_numbers(1328060)\n[11, 5, 14, 6]\n</code></pre> Source code in <code>pancakeswap_lottery/lottery.py</code> <pre><code>def get_lottery_numbers(self, tokenid):\n    \"\"\"Get lottery numbers for a given ticket\n\n    Args:\n        tokenid (int): Lottery ticket id\n\n    Examples:\n        &gt;&gt;&gt; lottery.get_lottery_numbers(1328060)\n        [11, 5, 14, 6]\n    \"\"\"\n    return self.token_contract.functions.getLotteryNumbers(tokenid).call()\n</code></pre>"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_matching_reward_amount","title":"<code>get_matching_reward_amount(issue_index, matching_num)</code>","text":"<p>Get number of tickets matched a specified number</p> <p>Parameters:</p> Name Type Description Default <code>issue_index</code> <code>int</code> <p>Lottery round</p> required <code>matching_num</code> <code>int</code> <p>Number to match</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.get_matching_reward_amount(432, 3)\n34\n</code></pre> Source code in <code>pancakeswap_lottery/lottery.py</code> <pre><code>def get_matching_reward_amount(self, issue_index, matching_num):\n    \"\"\"Get number of tickets matched a specified number\n\n    Args:\n        issue_index (int): Lottery round\n        matching_num (int): Number to match\n\n    Examples:\n        &gt;&gt;&gt; lottery.get_matching_reward_amount(432, 3)\n        34\n    \"\"\"\n    matching_reward_amount = (\n        self.lottery_contract.functions.getMatchingRewardAmount(\n            issue_index, matching_num\n        ).call()\n    )\n\n    return int(matching_reward_amount / self.decimals)\n</code></pre>"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_max_number","title":"<code>get_max_number()</code>","text":"<p>Get max number</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.get_max_number()\n14\n</code></pre> Source code in <code>pancakeswap_lottery/lottery.py</code> <pre><code>def get_max_number(self):\n    \"\"\"Get max number\n\n    Examples:\n        &gt;&gt;&gt; lottery.get_max_number()\n        14\n    \"\"\"\n    return self.lottery_contract.functions.maxNumber().call()\n</code></pre>"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_min_price","title":"<code>get_min_price()</code>","text":"<p>Get current price of 1 ticket</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.get_min_price()\n1\n</code></pre> Source code in <code>pancakeswap_lottery/lottery.py</code> <pre><code>def get_min_price(self):\n    \"\"\"Get current price of 1 ticket\n\n    Examples:\n        &gt;&gt;&gt; lottery.get_min_price()\n        1\n    \"\"\"\n    min_price = self.lottery_contract.functions.minPrice().call()\n\n    return int(min_price / self.decimals)\n</code></pre>"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_reward_view","title":"<code>get_reward_view(tokenid)</code>","text":"<p>Get rewards for a given ticket</p> <p>Parameters:</p> Name Type Description Default <code>tokenid</code> <code>int</code> <p>Lottery ticket id</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.get_reward_view(1328060)\n0\n</code></pre> Source code in <code>pancakeswap_lottery/lottery.py</code> <pre><code>def get_reward_view(self, tokenid):\n    \"\"\"Get rewards for a given ticket\n\n    Args:\n        tokenid (int): Lottery ticket id\n\n    Examples:\n        &gt;&gt;&gt; lottery.get_reward_view(1328060)\n        0\n    \"\"\"\n    return self.lottery_contract.functions.getRewardView(tokenid).call()\n</code></pre>"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_total_addresses","title":"<code>get_total_addresses()</code>","text":"<p>Get total addresses</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.get_total_addresses()\n200\n</code></pre> Source code in <code>pancakeswap_lottery/lottery.py</code> <pre><code>def get_total_addresses(self):\n    \"\"\"Get total addresses\n\n    Examples:\n        &gt;&gt;&gt; lottery.get_total_addresses()\n        200\n    \"\"\"\n    return self.lottery_contract.functions.totalAddresses().call()\n</code></pre>"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_total_amount","title":"<code>get_total_amount()</code>","text":"<p>Get total pot (CAKE) of current lottery round</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.get_total_amount()\n34977.25\n</code></pre> Source code in <code>pancakeswap_lottery/lottery.py</code> <pre><code>def get_total_amount(self):\n    \"\"\"Get total pot (CAKE) of current lottery round\n\n    Examples:\n        &gt;&gt;&gt; lottery.get_total_amount()\n        34977.25\n    \"\"\"\n    total_amount = self.lottery_contract.functions.totalAmount().call()\n\n    return total_amount / self.decimals\n</code></pre>"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_total_rewards","title":"<code>get_total_rewards(issue_index)</code>","text":"<p>Get total rewards of lottery round</p> <p>Parameters:</p> Name Type Description Default <code>issue_index</code> <code>int</code> <p>Lottery round</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; lottery.get_total_rewards(432)\n51384.125\n</code></pre> Source code in <code>pancakeswap_lottery/lottery.py</code> <pre><code>def get_total_rewards(self, issue_index):\n    \"\"\"Get total rewards of lottery round\n\n    Args:\n        issue_index (int): Lottery round\n\n    Examples:\n        &gt;&gt;&gt; lottery.get_total_rewards(432)\n        51384.125\n    \"\"\"\n    total_rewards = self.lottery_contract.functions.getTotalRewards(\n        issue_index\n    ).call()\n\n    return total_rewards / self.decimals\n</code></pre>"},{"location":"v1/guide/","title":"Introduction","text":""},{"location":"v1/guide/#import-lottery","title":"Import Lottery","text":"<pre><code>from pancakeswap_lottery import Lottery\n</code></pre>"},{"location":"v1/guide/#create-instance","title":"Create Instance","text":"<p>To retrieve data from the lottery smart-contract, create an instance of the <code>Lottery</code> class:</p> <pre><code>lottery = Lottery()\n</code></pre>"},{"location":"v1/guide/#example","title":"Example","text":"<pre><code>from pancakeswap_lottery import Lottery\n\nlottery = Lottery()\n\n# Lottery round #432\nissue_index = 432\n\n# Date and time of lottery round\nlottery_date = lottery.get_lottery_date(issue_index)\n\n# Total rewards of lottery round\ntotal_rewards = lottery.get_total_rewards(issue_index)\n</code></pre> <p>For more examples, see Examples.</p>"},{"location":"v1/guide/examples/","title":"Examples","text":"<p>Here's a few example use cases for this module:</p> <ul> <li>Lottery stats - Current lottery round stats</li> <li>Lottery history - Past lottery rounds stats</li> </ul>"},{"location":"v1/guide/examples/#lottery-stats","title":"Lottery stats","text":"<p>Get stats from the current lottery round.</p> Code <pre><code>from datetime import datetime\nfrom pancakeswap_lottery import Lottery\n\n\ndef format_datestr(dt):\n    now = datetime.now().astimezone()\n    total_seconds = int((dt - now).total_seconds())\n\n    days, remainder = divmod(total_seconds, 86400)\n    hours, remainder = divmod(remainder, 3600)\n    minutes, seconds = divmod(remainder, 60)\n\n    d = {\n        \"total_seconds\": total_seconds,\n        \"days\": int(days),\n        \"hours\": int(hours),\n        \"minutes\": int(minutes),\n        \"seconds\": int(seconds),\n    }\n\n    if d[\"hours\"] == 0:\n        datestr = f\"{d['minutes']} minutes\"\n    else:\n        datestr = f\"{d['hours']} hours {d['minutes']} minutes\"\n\n    return datestr\n\n\ndef get_lottery_stats():\n    lottery = Lottery()\n\n    issue_index = lottery.get_issue_index()\n    pool_size = lottery.get_total_amount()\n\n    lottery_date = lottery.get_lottery_date(issue_index)\n    drawdate_str = format_datestr(lottery_date)\n\n    allocation = lottery.get_allocation()\n\n    prize_pool_match4 = int(pool_size * allocation.get(\"1\") / 100)\n    prize_pool_match3 = int(pool_size * allocation.get(\"2\") / 100)\n    prize_pool_match2 = int(pool_size * allocation.get(\"3\") / 100)\n\n    ret_str = \"\ud83e\udd5e The CAKE Lottery \ud83e\udd5e\"\n    ret_str += f\"\\nRound #{issue_index}\"\n    ret_str += f\"\\nDraw in {drawdate_str} ({lottery_date.strftime('%Y-%m-%d %H:%M')})\"\n\n    ret_str += \"\\n\\n\ud83d\udcb0 Pool size\"\n    ret_str += f\"\\n{int(pool_size)} CAKE\"\n\n    ret_str += \"\\n\\n\ud83d\udcb5 Prize pool allocation\"\n    ret_str += f\"\\nMatch 4: {prize_pool_match4} CAKE\"\n    ret_str += f\"\\nMatch 3: {prize_pool_match3} CAKE\"\n    ret_str += f\"\\nMatch 2: {prize_pool_match2} CAKE\"\n\n    return ret_str\n\n\nlottery_stats = get_lottery_stats()\nprint(lottery_stats)\n</code></pre> Output <pre><code>\ud83e\udd5e The CAKE Lottery \ud83e\udd5e\nRound #481\nDraw in 2 hours 2 minutes (2021-04-19 14:00)\n\n\ud83d\udcb0 Pool size\n1581 CAKE\n\n\ud83d\udcb5 Prize pool allocation\nMatch 4: 790 CAKE\nMatch 3: 316 CAKE\nMatch 2: 158 CAKE\n</code></pre>"},{"location":"v1/guide/examples/#lottery-history","title":"Lottery history","text":"<p>Get lottery history data (Lottery Date, Round, Prize pool) from the last <code>X</code> rounds.</p> Code <pre><code>from pancakeswap_lottery import Lottery\n\n\ndef get_lottery_history(last_rounds):\n    lottery = Lottery()\n\n    issue_index = lottery.get_issue_index()\n\n    header = [\"Lottery Date\", \"Round\", \"Prizes (CAKE)\"]\n    rows = [header]\n\n    for i in range(0, last_rounds):\n        issue_index -= 1\n\n        lottery_date = lottery.get_lottery_date(issue_index)\n        lottery_date_str = lottery_date.strftime(\"%Y-%m-%d %H:%M\")\n\n        total_rewards = int(lottery.get_total_rewards(issue_index))\n\n        row = [lottery_date_str, issue_index, total_rewards]\n        rows.append(row)\n\n    ret_str = \"\ud83e\udd5e The CAKE Lottery - History \ud83e\udd5e\\n\\n\"\n    ret_str += f\"Showing data for last {last_rounds} rounds:\\n\\n\"\n    ret_str += \"\\n\".join([\"\".join([f\"{x:&gt;16}\" for x in r]) for r in rows])\n\n    return ret_str\n\n\nrounds = 10  # get data for last 10 rounds\nlottery_history = get_lottery_history(rounds)\nprint(lottery_history)\n</code></pre> Output <pre><code>\ud83e\udd5e The CAKE Lottery - History \ud83e\udd5e\n\nShowing data for last 10 rounds:\n\n    Lottery Date           Round   Prizes (CAKE)\n2021-04-19 02:00             480           91715\n2021-04-18 14:00             479           44838\n2021-04-18 02:00             478            3203\n2021-04-17 14:00             477            1736\n2021-04-17 02:00             476           52022\n2021-04-16 14:00             475           47675\n2021-04-16 02:00             474            1736\n2021-04-15 14:00             473            3088\n2021-04-15 02:00             472          113863\n2021-04-14 14:00             471           61936\n</code></pre>"},{"location":"v1/guide/functions/","title":"Functions","text":""},{"location":"v1/guide/functions/#general","title":"General","text":"<ul> <li>get_lottery_date - Get date and time of lottery round</li> <li>get_cake - Get CAKE contract address</li> <li>get_lotteryNFT - Get PLT-token contract address</li> <li>get_max_number - Get max number</li> <li>get_min_price - Get current price of 1 ticket</li> <li>get_balance_of - Get total number of tickets bought by a given address</li> </ul>"},{"location":"v1/guide/functions/#next-draw","title":"Next draw","text":"<ul> <li>get_allocation - Get prize pool allocation (percent)</li> <li>get_drawed - Check if current lottery round is drawed</li> <li>get_drawing_phase - Get current lottery round drawing phase</li> <li>get_issue_index - Get current lottery round id</li> <li>get_last_timestamp - Last updated (timestamp)</li> <li>get_total_addresses - Get total addresses</li> <li>get_total_amount - Get total pot (CAKE) of current lottery round</li> </ul>"},{"location":"v1/guide/functions/#past-draws","title":"Past draws","text":"<ul> <li>get_history_amount - Get numbers of tickets matched</li> <li>get_history_numbers - Get winning numbers of lottery round</li> <li>get_lottery_numbers - Get lottery numbers for a given ticket</li> <li>get_matching_reward_amount - Get number of tickets matched a specified number</li> <li>get_reward_view - Get rewards for a given ticket</li> <li>get_total_rewards - Get total rewards of lottery round</li> </ul>"}]}